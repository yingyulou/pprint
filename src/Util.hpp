/*
    Util.hpp
    ========
        Utility functions implementation.
*/

#pragma once

#include <string>
#include <cstdlib>
#include <cxxabi.h>

namespace pprint
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Using
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using std::string;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Get Type Name
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
string __getTypeName(const T &)
{
    char *strBuf = abi::__cxa_demangle(typeid(T).name(), 0, 0, 0);
    string typeName = strBuf;
    free(strBuf);

    return typeName;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Reverse Stack
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
T __reverseStack(T val)
{
    T reverseStack;

    while (!val.empty())
    {
        reverseStack.push(val.top());
        val.pop();
    }

    return reverseStack;
}


}  // End namespace pprint
